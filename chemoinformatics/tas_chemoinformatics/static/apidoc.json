{"paths": {"/static/{filename}": {}, "/doc": {}, "/fingerprints/fingerprint_db": {"post": {"summary": "Create database of fingerprints from given compounds.", "description": "Fingerprint database is returned as base64 encoded database file in fps format.", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/FingerprintDB"}}}}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/FingerprintDBResult"}}}}}}}, "/fingerprints/simsearch": {"post": {"summary": "Scan database of fingerprints for matches.", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/FingerprintScan"}}}}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/FingerprintScanResult"}}}}}}}, "/tautomers/enumerate": {"post": {"summary": "Enumerate tautomers for the given compounds.", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tautomerize"}}}}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TautomerizeResult"}}}}}}}, "/tautomers/canonicalize": {"post": {"summary": "Find canonical representation of compounds.", "description": "Find canonical tautomer for all compounds in the `COMPOUND_FILE` input. This file should be a csv file where one column contains compounds as InChI or SMILES. The canonical compounds will be written as InChI and SMILES to the `OUTPUT_FILE`.", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Canonicalize"}}}}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CanonicalizeResult"}}}}}}}, "/query/convert": {}}, "info": {"title": "TAS Chemoinformatics tools", "version": "0.2"}, "openapi": "3.0.2", "components": {"schemas": {"Compounds": {"type": "object", "properties": {"compounds": {"type": "array", "description": "A list of compound identifiers", "example": "['InChI=1S/C9H8O4/c1-6(10)13-8-5-3-2-4-7(8)9(11)12/h2-5H,1H3,(H,11,12)', 'InChI=1S/C8H11NO2/c9-4-3-6-1-2-7(10)8(11)5-6/h1-2,5,10-11H,3-4,9H2']", "items": {"type": "string"}}, "names": {"type": "array", "description": "An optional list of compound names", "example": "['Aspirin', 'Dopamine']", "items": {"type": "string"}}, "identifier": {"type": "string", "enum": ["smiles", "inchi"], "description": "The type of compound identifiers used", "example": "inchi"}}, "required": ["compounds", "identifier"]}, "FingerprintDB": {"type": "object", "properties": {"compounds": {"$ref": "#/components/schemas/Compounds"}, "fingerprint_type": {"type": "string", "default": "topological", "enum": ["topological", "morgan"], "description": "The type of fingerprinting algorithm to be used"}, "fingerprint_args": {"type": "array", "default": [], "description": "Optional additional arguments passed to chemfp. See https://chemfp.readthedocs.io/en/chemfp-1.5/tool-help.html#rdkit2fps-command-line-options", "example": "['--useChirality', '0']", "items": {"type": "string"}}}, "required": ["compounds"]}, "FingerprintDBResult": {"type": "object", "properties": {"request": {"$ref": "#/components/schemas/FingerprintDB"}, "skipped": {"type": "array", "items": {"type": "string"}}, "fingerprint_db": {"type": "string", "description": "Fingerprint database file in .fps format as base64 encoded string"}}, "required": ["fingerprint_db"]}, "FingerprintScan": {"type": "object", "properties": {"query": {"type": "string", "description": "Query database with fingerprints to be matched to the reference database. If ommitted, an  all-by-all search using  all  reference fingerprints is performed. Fingerprint database file in .fps format as base64 encoded string."}, "threshold": {"type": "number", "format": "float", "default": 0.95, "description": "Threshold for reporting matches calculated by Tanimoto similarity"}, "fingerprint_db": {"type": "string", "description": "Reference database that is searched for fingerprints matching the query database. Fingerprint database file in .fps format as base64 encoded string."}}, "required": ["fingerprint_db"]}, "FingerprintScanResult": {"type": "object", "properties": {"query": {"type": "array", "items": {"type": "string"}}, "score": {"type": "array", "items": {"type": "number", "format": "float"}}, "request": {"$ref": "#/components/schemas/FingerprintScan"}, "match": {"type": "array", "items": {"type": "string"}}}, "required": ["match", "query", "score"]}, "Tautomerize": {"type": "object", "properties": {"compounds": {"$ref": "#/components/schemas/Compounds"}, "max_tautomers": {"type": "integer", "format": "int32", "default": 10, "description": "Maximum number of tautomers to generate"}}, "required": ["compounds"]}, "TautomerizeResult": {"type": "object", "properties": {"tautomers": {}, "request": {"$ref": "#/components/schemas/Tautomerize"}}, "required": ["tautomers"]}, "Canonicalize": {"type": "object", "properties": {"compounds": {"$ref": "#/components/schemas/Compounds"}, "standardize": {"type": "boolean", "default": true, "description": "Standardize input molecule before canonicalization. See https://molvs.readthedocs.io/en/latest/guide/standardize.html"}}, "required": ["compounds"]}, "CanonicalizeResult": {"type": "object", "properties": {"request": {"$ref": "#/components/schemas/Canonicalize"}, "skipped": {"type": "array", "items": {"type": "string"}}, "canonical": {}}, "required": ["canonical"]}}}}